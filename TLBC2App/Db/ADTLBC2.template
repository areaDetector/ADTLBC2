# Database for the records specific to the ADTLBC2 driver
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default 1
#% macro, ADDR, Asyn Port address, default 0

include "ADBase.template"

record(ao, "$(P)$(R)AcquireTime") {
    field(ASLO, "1e-3")
    field(PREC, "6")
    field(VAL, "0.1")
    field(EGU, "second")
}

record(ai, "$(P)$(R)AcquireTime_RBV") {
    field(ASLO, "1e-3")
    field(PREC, "6")
    field(EGU, "second")
}

record(longout, "$(P)$(R)MinX") {
    field(PINI, "NO")
}

record(longout, "$(P)$(R)MinX") {
    field(PINI, "NO")
}

record(longout, "$(P)$(R)SizeX") {
    field(PINI, "NO")
}

record(longout, "$(P)$(R)SizeY") {
    field(PINI, "NO")
}

record(ai, "$(P)$(R)TemperatureActual") {
    field(SCAN, "1 second")
}

record(bo, "$(P)$(R)AmbientLightCorrection") {
    field(DESC, "Change ambient light correction mode")
    field(DTYP, "asynInt32")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL, "0")
    field(OUT, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))AMBIENT_LIGHT_CORRECTION")
    field(PINI, "YES")
}

record(bi, "$(P)$(R)AmbientLightCorrection_RBV") {
    field(DESC, "Get ambient light correction mode")
    field(DTYP, "asynInt32")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))AMBIENT_LIGHT_CORRECTION")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)ComputeAmbientLightCorrection") {
    field(DESC, "Compute ambient light correction")
    field(DTYP, "asynInt32")
    field(ZNAM, "Done")
    field(ONAM, "Compute")
    field(VAL, "0")
    field(OUT, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))COMPUTE_AMBIENT_LIGHT_CORRECTION")
    field(PINI, "YES")
}

record(bi, "$(P)$(R)ComputeAmbientLightCorrection_RBV") {
    field(DESC, "Get ambient light correction mode")
    field(DTYP, "asynInt32")
    field(ZNAM, "Done")
    field(ONAM, "Computing")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))COMPUTE_AMBIENT_LIGHT_CORRECTION")
    field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(R)AmbientLightCorrectionStatus") {
    field(DESC, "Get computation status")
    field(DTYP, "asynInt32")
    field(ZNAM, "Never run")
    field(ONAM, "Computed")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))AMBIENT_LIGHT_CORRECTION_STATUS")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)Attenuation") {
    field(DESC, "Set attenuation")
    field(DTYP, "asynFloat64")
    field(VAL, "0")
    field(EGU, "dB")
    field(PREC, "3")
    field(OUT, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ATTENUATION")
    field(PINI, "YES")
}

record(ai, "$(P)$(R)Attenuation_RBV") {
    field(DESC, "Get attenuation")
    field(DTYP, "asynFloat64")
    field(PREC, "3")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ATTENUATION")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)AutoCalcAreaClipLevel") {
    field(DESC, "Set auto calc area clip level")
    field(DTYP, "asynFloat64")
    field(VAL, "0.01")
    field(PREC, "3")
    field(OUT, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))AUTO_CALC_AREA_CLIP_LEVEL")
    field(PINI, "YES")
}

record(ai, "$(P)$(R)AutoCalcAreaClipLevel_RBV") {
    field(DESC, "Get auto calc area clip level")
    field(DTYP, "asynFloat64")
    field(PREC, "3")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))AUTO_CALC_AREA_CLIP_LEVEL")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)AutoExposure") {
    field(DESC, "Use latest data auto set exposure")
    field(DTYP, "asynInt32")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL, "0")
    field(OUT, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))AUTO_EXPOSURE")
    field(PINI, "YES")
}

record(bi, "$(P)$(R)AutoExposure_RBV") {
    field(DESC, "Get auto exposure mode")
    field(DTYP, "asynInt32")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))AUTO_EXPOSURE")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)BeamWidthX_RBV") {
    field(DESC, "Beam width at clip level in X axis")
    field(DTYP, "asynFloat64")
    field(PREC, "3")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))BEAM_WIDTH_X")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)BeamWidthY_RBV") {
    field(DESC, "Beam width at clip level in Y axis")
    field(DTYP, "asynFloat64")
    field(PREC, "3")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))BEAM_WIDTH_Y")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)CentroidX_RBV") {
    field(DESC, "Centroid position in X axis")
    field(DTYP, "asynFloat64")
    field(PREC, "3")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))CENTROID_X")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)CentroidY_RBV") {
    field(DESC, "Centroid position in Y axis")
    field(DTYP, "asynFloat64")
    field(PREC, "3")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))CENTROID_Y")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)ClipLevel") {
    field(DESC, "Set clip level used for beam statistics")
    field(DTYP, "asynFloat64")
    field(VAL, "0.135")
    field(PREC, "6")
    field(OUT, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))CLIP_LEVEL")
    field(PINI, "YES")
}

record(ai, "$(P)$(R)ClipLevel_RBV") {
    field(DESC, "Get clip level used for beam statistics")
    field(DTYP, "asynFloat64")
    field(PREC, "6")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))CLIP_LEVEL")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)Saturation_RBV") {
    field(DESC, "Ratio of the maximum intensity used")
    field(DTYP, "asynFloat64")
    field(PREC, "3")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SATURATION")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)Wavelength") {
    field(DESC, "Set wavelength")
    field(DTYP, "asynFloat64")
    field(VAL, "245")
    field(EGU, "nm")
    field(PREC, "1")
    field(OUT, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))WAVELENGTH")
    field(PINI, "YES")
}

record(ai, "$(P)$(R)Wavelength_RBV") {
    field(DESC, "Get wavelength")
    field(DTYP, "asynFloat64")
    field(PREC, "1")
    field(EGU, "nm")
    field(INP, "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))WAVELENGTH")
    field(SCAN, "I/O Intr")
}
